"use client"

// Generated by Claude 3 Opus

import Badge from "@components/badge"
import Input from "@components/input"
import React from "react"
import styles from './filterable-list.module.css'
import { Base } from "@lib/types"
import tagStyles from '../talks/tags.module.css'

const FilterableList = <T extends Base>({
    items,
    renderItem,
    filterProperties,
    sortOptions,
    tags,
    enableSearch = true,
    enableSort = true,
    enableTags = true
}: {
    items: Array<T>
    renderItem: (item: T) => React.ReactNode
    filterProperties: Array<keyof T>
    sortOptions: Array<{
        label: string
        value: keyof T
    }>
    tags?: (item: T) => Array<string>
    enableSearch?: boolean
    enableSort?: boolean
    enableTags?: boolean
}) => {
    const [search, setSearch] = React.useState('')
    const [sort, setSort] = React.useState(sortOptions[0].value)
    const [desc, setDesc] = React.useState(true)
    const [selectedTags, setSelectedTags] = React.useState<Array<string>>([])

    const filteredItems = React.useMemo(() => {
        const filteredBySearch = search
            ? items.filter((item) =>
                filterProperties.some((prop) =>
                    String(item[prop]).toLowerCase().includes(search.toLowerCase())
                )
            )
            : items
        const filteredByTags = selectedTags.length
            ? filteredBySearch.filter((item) =>
                selectedTags.every((tag) => tags?.(item)?.includes(tag))
            )
            : filteredBySearch
        const compareFn = (a: T, b: T) => {
            const aVal = a[sort]
            const bVal = b[sort]

            // special case date
            if (sort === 'date') {
                return new Date(bVal as any).getTime() - new Date(aVal as any).getTime()
            }

            if (typeof aVal === 'string') {
                return aVal.localeCompare(bVal as string)
            }

            if (typeof aVal === 'number') {
                return (aVal as number) - (bVal as number)
            }

            return 0
        }

        const sorted = filteredByTags.sort((a, b) =>
            desc ? compareFn(a, b) : compareFn(b, a)
        )
        return sorted
    }, [desc, search, selectedTags, sort, items, filterProperties, tags])

    const onSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        setSort(e.target.value as keyof T)
    }

    const onTagClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
        e.preventDefault()
        const tag = e.currentTarget.textContent?.split(' ')[0]
        if (!tag) return

        setSelectedTags(
            // selectedTags.includes(tag)
            //     ? selectedTags.filter((t) => t !== tag)
            //     : [...selectedTags, tag]
            [tag]
        )
    }

    return (
        <>
            {enableSearch || enableSort ? <div className={styles.filterSettings}>
                {enableSearch ? <Input
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                    placeholder="Search"
                    aria-label="Search items"
                /> : null}
                {enableSort ? <span className={styles.selects}>
                    <select className={styles.sort} value={String(sort)} onChange={onSortChange}>
                        {sortOptions.map((opt) => (
                            <option key={`sort-${String(opt.value)}-${opt.label}`} value={String(opt.value)}>
                                {opt.label}
                            </option>
                        ))}
                    </select>
                    <select
                        className={styles.sort}
                        value={desc.toString()}
                        onChange={(e) => setDesc(e.target.value === 'true')}
                    >
                        <option value="false">Descending</option>
                        <option value="true">Ascending</option>
                    </select>
                </span> : null}
            </div> : null}
            {tags && enableTags && (
                <div className={tagStyles.tags} style={{ marginBottom: 'var(--gap)' }}>
                    {Object.entries(
                        items.reduce((acc, item) => {
                            const itemTags = tags(item)
                            itemTags.forEach((tag) => {
                                acc[tag] = (acc[tag] || 0) + 1
                            })
                            console.log(items, filteredItems, acc)
                            return acc
                        }, {} as { [tag: string]: number })
                    ).map(([tag, count], i) => {

                        console.log(filteredItems, tag, i)
                        return (
                            <Badge
                                key={filteredItems[i].title.replace(/\s/g, '-')}
                                className={`${tagStyles.tag} ${selectedTags.includes(tag) ? tagStyles.selected : ''
                                    }`}
                            >
                                <a onClick={onTagClick}>
                                    {tag} ({count})
                                </a>
                            </Badge>
                        )
                    })}
                </div>
            )}
            <ul className={styles.items}>
                {filteredItems.map((item) => renderItem(item))}
            </ul>
        </>
    )
}

export default FilterableList